#!/bin/sh
#
#
# OpenStack Orchestration API Service (heat-api)
#
# Description:  Manages an OpenStack Orchestration API Service (heat-api) process as an HA resource
#
# Authors:      Emilien Macchi
#
# Support:      openstack@lists.launchpad.net
# License:      Apache Software License (ASL) 2.0
#
#
# See usage() function below for more details ...
#
# OCF instance parameters:
#   OCF_RESKEY_binary
#   OCF_RESKEY_config
#   OCF_RESKEY_user
#   OCF_RESKEY_pid
#   OCF_RESKEY_monitor_binary
#   OCF_RESKEY_amqp_server_port
#   OCF_RESKEY_zeromq
#   OCF_RESKEY_additional_parameters
#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

#######################################################################

# Fill in some defaults if no values are specified

OCF_RESKEY_binary_default="heat-api"
OCF_RESKEY_config_default="/etc/heat/heat.conf"
OCF_RESKEY_user_default="heat"
OCF_RESKEY_pid_default="$HA_RSCTMP/$OCF_RESOURCE_INSTANCE.pid"
OCF_RESKEY_amqp_server_port_default="5672"
OCF_RESKEY_zeromq_default="false"

: ${OCF_RESKEY_binary=${OCF_RESKEY_binary_default}}
: ${OCF_RESKEY_config=${OCF_RESKEY_config_default}}
: ${OCF_RESKEY_user=${OCF_RESKEY_user_default}}
: ${OCF_RESKEY_pid=${OCF_RESKEY_pid_default}}
: ${OCF_RESKEY_amqp_server_port=${OCF_RESKEY_amqp_server_port_default}}
: ${OCF_RESKEY_zeromq=${OCF_RESKEY_zeromq_default}}

#######################################################################

usage() {
    cat <<UEND
        usage: $0 (start|stop|validate-all|meta-data|status|monitor)

        $0 manages an OpenStack Orchestration API Service (heat-api) process as an HA resource 

        The 'start' operation starts the heat-api service.
        The 'stop' operation stops the heat-api service.
        The 'validate-all' operation reports whether the parameters are valid
        The 'meta-data' operation reports this RA's meta-data information
        The 'status' operation reports whether the heat-api service is running
        The 'monitor' operation reports whether the heat-api service seems to be working

UEND
}

meta_data() {
    cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="heat-api">
<version>1.0</version>

<longdesc lang="en">
Resource agent for the OpenStack Orchestration API Service (heat-api)
May manage a heat-api instance or a clone set that 
creates a distributed heat-api cluster.
</longdesc>
<shortdesc lang="en">Manages the OpenStack Orchestration API Service (heat-api)</shortdesc>
<parameters>

<parameter name="binary" unique="0" required="0">
<longdesc lang="en">
Location of the OpenStack Orchestration API server binary (heat-api)
</longdesc>
<shortdesc lang="en">OpenStack Orchestration API server binary (heat-api)</shortdesc>
<content type="string" default="${OCF_RESKEY_binary_default}" />
</parameter>

<parameter name="config" unique="0" required="0">
<longdesc lang="en">
Location of the OpenStack Orchestration API Service (heat-api) configuration file
</longdesc>
<shortdesc lang="en">OpenStack Orchestration API (heat-api) config file</shortdesc>
<content type="string" default="${OCF_RESKEY_config_default}" />
</parameter>

<parameter name="user" unique="0" required="0">
<longdesc lang="en">
User running OpenStack Orchestration API Service (heat-api)
</longdesc>
<shortdesc lang="en">OpenStack Orchestration API Service (heat-api) user</shortdesc>
<content type="string" default="${OCF_RESKEY_user_default}" />
</parameter>

<parameter name="pid" unique="0" required="0">
<longdesc lang="en">
The pid file to use for this OpenStack Orchestration API Service (heat-api) instance
</longdesc>
<shortdesc lang="en">OpenStack Orchestration API Service (heat-api) pid file</shortdesc>
<content type="string" default="${OCF_RESKEY_pid_default}" />
</parameter>

<parameter name="amqp_server_port" unique="0" required="0">                                                                                                                                                              
<longdesc lang="en">                                                                                                                                                                                                      
The listening port number of the AMQP server. Use for monitoring purposes                                                                                                                                        
</longdesc>                                                                                                                                                                                                               
<shortdesc lang="en">AMQP listening port</shortdesc>                                                                                                                                                                      
<content type="integer" default="${OCF_RESKEY_amqp_server_port_default}" />                                                                                                                                              
</parameter>      

<parameter name="zeromq" unique="0" required="0">                                                                                                                                                              
<longdesc lang="en">                                                                                                                                                                                                      
If zeromq is used, this will disable the connection test to the AMQP server. Use for monitoring purposes                                                                                                                               
</longdesc>                                                                                                                                                                                                               
<shortdesc lang="en">Zero-MQ usage</shortdesc>                                                                                                                                                                      
<content type="boolean" default="${OCF_RESKEY_zeromq_default}" />                                                                                                                                              
</parameter>  

<parameter name="additional_parameters" unique="0" required="0">
<longdesc lang="en">
Additional parameters to pass on to the OpenStack Orchestration API Service (heat-api)
</longdesc>
<shortdesc lang="en">Additional parameters for heat-api</shortdesc>
<content type="string" />
</parameter>

</parameters>

<actions>
<action name="start" timeout="20" />
<action name="stop" timeout="20" />
<action name="status" timeout="20" />
<action name="monitor" timeout="30" interval="20" />
<action name="validate-all" timeout="5" />
<action name="meta-data" timeout="5" />
</actions>
</resource-agent>
END
}

#######################################################################
# Functions invoked by resource manager actions

heat_api_check_port() {
# This function has been taken from the squid RA and improved a bit
# The length of the integer must be 4
# Examples of valid port: "1080", "0080"
# Examples of invalid port: "1080bad", "0", "0000", ""

    local int
    local cnt
    
    int="$1"
    cnt=${#int}
    echo $int |egrep -qx '[0-9]+(:[0-9]+)?(,[0-9]+(:[0-9]+)?)*'

    if [ $? -ne 0 ] || [ $cnt -ne 4 ]; then
        ocf_log err "Invalid port number: $1"
        exit $OCF_ERR_CONFIGURED
    fi
}


heat_api_status() {

    result=`/etc/init.d/openstack-heat-api status|grep "is running"`
    if [[ "$result" != "" ]]; then
        return $OCF_SUCCESS;
    else
        ocf_log $1 "HEAT API is not running"
        return $OCF_NOT_RUNNING;
    fi

}

heat_api_monitor() {
    local rc
    local pid
    local rc_amqp
    local api_amqp_check

    heat_api_status
    rc=$?

    # If status returned anything but success, return that immediately
    if [ $rc -ne $OCF_SUCCESS ]; then
        return $rc
    fi

    ocf_log debug "OpenStack Orchestration API (heat-api) monitor succeeded"
    return $OCF_SUCCESS
}

heat_api_start() {
    local rc

    heat_api_status
    rc=$?
    if [ $rc -eq $OCF_SUCCESS ]; then
        ocf_log info "OpenStack Orchestration API (heat-api) already running"
        return $OCF_SUCCESS
    fi

    /etc/init.d/openstack-heat-api start &

    # Spin waiting for the server to come up.
    # start waiting
    start_timeout=60
    count=0
    while [ $count -lt $start_timeout ]
    do
        heat_api_monitor
        rc=$?
        if [ $rc = $OCF_SUCCESS ]; then
            break
        fi
        count=`expr $count + 1`
        sleep 2
        ocf_log debug "HEAT API still hasn't started yet. Waiting..."
    done

    heat_api_monitor
    rc=$?
    if [ $rc -ne $OCF_SUCCESS ]; then
        ocf_log err "OpenStack Orchestration API (heat-api) start failed"
        exit $OCF_ERR_GENERIC
    fi

    ocf_log info "OpenStack Orchestration API (heat-api) started"
    return $OCF_SUCCESS
}

heat_api_stop() {

    /etc/init.d/openstack-heat-api stop &

    # stop waiting
    shutdown_timeout=20
    count=0
    while [ $count -lt $shutdown_timeout ]; do
        heat_api_status
        rc=$?
        if [ $rc -eq $OCF_NOT_RUNNING ]; then
            break
        fi
        count=`expr $count + 1`
        sleep 1
        ocf_log debug "OpenStack Orchestration API (heat-api) still hasn't stopped yet. Waiting ..."
    done

    heat_api_status
    rc=$?
    if [ $rc -ne $OCF_NOT_RUNNING ]; then
        # SIGTERM didn't help either, try SIGKILL
        ocf_log info "OpenStack Orchestration API (heat-api) failed to stop after ${shutdown_timeout}s using SIGTERM. Trying SIGKILL ..."
    fi

    ocf_log info "OpenStack Orchestration API (heat-api) stopped"

    return $OCF_SUCCESS
}

#######################################################################

case "$1" in
  meta-data)    meta_data
                exit $OCF_SUCCESS;;
  usage|help)   usage
                exit $OCF_SUCCESS;;
esac

# Anything except meta-data and help must pass validation
#heat_api_validate || exit $?

# What kind of method was invoked?
case "$1" in
  start)        heat_api_start;;
  stop)         heat_api_stop;;
  status)       heat_api_status;;
  monitor)      heat_api_monitor;;
  validate-all) ;;
  *)            usage
                exit $OCF_ERR_UNIMPLEMENTED;;
esac
